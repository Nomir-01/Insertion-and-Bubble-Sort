INCLUDE Irvine32.inc
.data 
	Time DWORD ?
	Time2 real4 ?
	Array DWORD 10 DUP (?)	
	Alength DWORD ?
	Alength2  DWORD ?
	Space BYTE " ",0 
	M1 BYTE "Enter Any 10 Positive Values",0dh,0ah,0
	M2 BYTE "Enter Your Value : ",0
	M3 BYTE "Array After Bubble Sort : ",0 
	M4 BYTE "Time In Seconds To Complete Bubble Sort : "
.code
Bubble_Sort PROC
	cpuid							;Forced To First Complete Previous Instruction Completely
	rdtsc							;Read Time Stamp
	mov time, eax					;Move Counter Into Variable
	fdiv							;Floating-Point Divide
	cpuid							;Forced To First Complete Previous Instruction Completely
	
	mov eax,Lengthof Array			;First Length Of Array
	mov Alength,eax					;First Length Of Array
	mov ecx,0						;i = 0
	mov ebx,Alength					;Second Length Of Array
	dec ebx							;Second Length Of Array
	mov Alength2,ebx				;Second Length Of Array
.while (ecx < Alength2)				;i < Second Length Of Array
	mov ebx,ecx						;j = i
	inc ebx							;j = i + 1 = 1
	.while(ebx < Alength)			;j < First Length Of Array
		mov eax,Array[ecx*4]		;Array[i] < Array[j]
		mov edx,Array[ebx*4]		;Array[i] < Array[j]
		cmp eax,edx					;Array[i] < Array[j]
		jg Swap						;Jump To Swapping To Swap Values
		cmp eax,Array[ecx*4]		;Array[i] < Array[j]
		jle DSwap					;Jump To DSwap To Move Further In Loop Without Swapping Values
		Swap:
			mov eax,Array[ecx*4]	;Swapping Values
			mov edx,Array[ebx*4]	;Swapping Values
			mov Array[ecx*4],edx	;Swapping Values
			mov Array[ebx*4],eax	;Swapping Values
		DSwap:
			inc ebx					;j = j + 1
	.endw 
	inc ecx							;i = i + 1
.endw
	rdtsc							;Read Time Stamp
	sub eax, time					;Find The Difference
	mov time2,eax					;Move Value To A Floating Point Variable
	fld time2						;Push Into FUP Stack
ret 
Bubble_Sort ENDP

main PROC
	mov edx,OFFSET M1
	call writestring
	call crlf
	mov ecx,0
.while(ecx<10)
	mov edx,OFFSET M2
	call writestring
	call readint
	mov Array[ecx*4],eax
	inc ecx
.endw
	call crlf
	call Bubble_Sort

	mov edx,offset M3
	call writestring
	mov ecx,0 
.while (ecx < Alength) 
	mov eax,Array[ecx*4] 
	call writedec 
	inc ecx 
	mov edx,offset Space 
	call writestring 
.endw 
	call crlf
	call crlf
	mov edx,OFFSET M4
	call writestring
	call writefloat
	call crlf
exit
main ENDP
END main
